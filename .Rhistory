pheno = pheno %>% filter(participant_id %in% meta_data$ID)%>%
arrange(participant_id) %>% mutate(prepID = meta_data$PrepID)
prep1_pre2_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id)
GlowingPlacenta_RNAseq.rawCounts = GlowingPlacenta_RNAseq.rawCounts.nonZero.141.samples_copy %>% select(as.vector(t(prep1_pre2_ID)))
Lean_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id, official_enroll_category) %>% filter(official_enroll_category == "Lean")
Lean_ID = as.vector(t(Lean_ID$participant_id))
Overweight_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id, official_enroll_category) %>% filter(official_enroll_category == "Overweight")
Overweight_ID = as.vector(t(Overweight_ID$participant_id))
GlowingPlacenta_RNAseq.rawCounts$X = row.names(GlowingPlacenta_RNAseq.rawCounts)
GlowingPlacenta_RNAseq.rawCounts = GlowingPlacenta_RNAseq.rawCounts %>% relocate(X)
Lean_ID_index = c()
for (x in 1:length(Lean_ID)){
Lean_ID_index[x] = which(colnames(GlowingPlacenta_RNAseq.rawCounts) == Lean_ID[x])
}
Overweight_ID_index = c()
for (x in 1:length(Overweight_ID)){
Overweight_ID_index[x] = which(colnames(GlowingPlacenta_RNAseq.rawCounts) == Overweight_ID[x])
}
rownames(GlowingPlacenta_RNAseq.rawCounts) = NULL
#write.table(GlowingPlacenta_RNAseq.rawCounts, file = "GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", row.names = F, col.names = T)
library(TRAPR)
Sample <- TRAPR.Data.ReadExpressionTable("GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", Exp1 = Lean_ID_index, Exp2 = Overweight_ID_index, Tag = c('Lean', 'Overweight'))
nSample <- TRAPR.Normalize(Sample, Method = "UpperQuartile")
vst_data = TRAPR.Transformation.VSN(nSample)
library(sva)
glowing_uq_vst = data.frame(vst_data$CurrentMatrix)
row.names(glowing_uq_vst) = vst_data[["CurrentGene"]]
colnames(glowing_uq_vst) = vst_data[["CurrentSample"]]
pheno = pheno %>% filter(prepID == "prep2"| prepID == "prep3")
batch = pheno$prepID
## Model matrix for batch-corrections (May need to adjust model matrix to 'protect' coefficients (study specific)):
mod <- model.matrix(~1 + official_enroll_category , data=pheno)
## Run ComBat to remove batch effects
combat.adj = ComBat(glowing_uq_vst,batch = batch, mod = mod)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
ggplot(data = data.frame(PCs), aes(PC2, PC1, color = pheno$prepID)) + geom_point() + labs(title = "UQ +VST +Combat for prep2 and prep3 (n=93)")
write.table(GlowingPlacenta_RNAseq.rawCounts, file = "GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", row.names = F, col.names = T)
Sample <- TRAPR.Data.ReadExpressionTable("GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", Exp1 = Lean_ID_index, Exp2 = Overweight_ID_index, Tag = c('Lean', 'Overweight'))
nSample <- TRAPR.Normalize(Sample, Method = "UpperQuartile")
vst_data = TRAPR.Transformation.VSN(nSample)
glowing_uq_vst = data.frame(vst_data$CurrentMatrix)
row.names(glowing_uq_vst) = vst_data[["CurrentGene"]]
colnames(glowing_uq_vst) = vst_data[["CurrentSample"]]
pheno = pheno %>% filter(prepID == "prep2"| prepID == "prep3")
batch = pheno$prepID
## Model matrix for batch-corrections (May need to adjust model matrix to 'protect' coefficients (study specific)):
mod <- model.matrix(~1 + official_enroll_category , data=pheno)
## Run ComBat to remove batch effects
combat.adj = ComBat(glowing_uq_vst,batch = batch, mod = mod)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
ggplot(data = data.frame(PCs), aes(PC2, PC1, color = pheno$prepID)) + geom_point() + labs(title = "UQ +VST +Combat for prep2 and prep3 (n=93)")
PCs
PCs$PC1 > 300
View(PCs)
PCs[,"PC1"]
PCs[,"PC1"] > 300
which(PCs[,"PC1"] > 300 == TRUE)
?subset
subset(PCs, PC1 > 300)
colnames(PCs)
subset(PCs, "PC1" > 300)
subset(PCs, PC1 > 300)
PCs[,"PC1"] > 300
subset(PCs[,"PC1"] > 300, TRUE)
subset(PCs[,"PC1"] > 300 == TRUE)
(PCs[,"PC1"] > 300) == TRUE
which(PCs[,"PC1"] > 300) == TRUE)
which((PCs[,"PC1"] > 300) == TRUE)
View(combat.adj)
combat.adj1 = combat.adj[, -c("G-123", "G-285")]
combat.adj1 = combat.adj[,colnames(combat.adj)!= "G-123" & colnames(combat.adj)!= "G-285"]
dim(combat.adj1)
dim(combat.adj)
combat.adj1 = combat.adj[, !colnames(combat.adj) %in% c("G-123", "G-280")]
dim(combat.adj)
dim(combat.adj1)
rm(combat.adj1)
combat.adj = combat.adj[, !colnames(combat.adj) %in% c("G-123", "G-280")]
dim(combat.adj)
View(combat.adj)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = F, col.names = T)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = T, col.names = T)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = F, col.names = T)
combat.adj1 = combat.adj
combat.adj1$X = row.names(combat.adj)
combat.adj1 = combat.adj1 %>% relocate(X)
View(combat.adj1)
combat.adj1 = data.frame(combat.adj)
combat.adj1$X = row.names(combat.adj)
combat.adj1 = combat.adj1 %>% relocate(X)
View(combat.adj1)
?write.csv
write.csv(combat.adj,file = "combat-adj-91-samples.csv", sep = ",", row.names = T, col.names = T)
View(combat.adj)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
library(GWENA)
save(combat.adj, file = "combat_adj_91_samples.Rdata")
rm(combat.adj1)
View(combat.adj)
load("combat_adj_91_samples.Rdata")
View(combat.adj)
combat.adj = t(combat.adj)
powers=seq(from=1,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=0.5
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.1
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="bicor" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
?pickSoftThreshold
owers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="cor", corFnc = list(method = "spearman"))
owers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="cor", corOptions = list(method = "spearman"))
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
library(GWENA)
load("combat_adj_91_samples.Rdata")
combat.adj = t(combat.adj)
k = softConnectivity(datExpr = combat.adj, type = "signed", power = 10)
# Plot a histogram of k and a scale free topology plot
sizeGrWindow(10,5)
par(mfrow=c(1,2))
hist(k)
scaleFreePlot(k, main="Check scale free topology\n")
threads_to_use = 2
net = build_net(combat.adj, cor_func = "pearson", fit_cut_off = 0.85, n_threads = threads_to_use, network_type = "signed")
fit_power_table = net$metadata$fit_power_table
fit_power_table[fit_power_table$Power == net$metadata$power, "SFT.R.sq"]
modules = detect_modules(combat.adj, net$network)
View(modules)
modules[["modules"]]
his(length(modules$modules))
hist(length(modules$modules))
modules[["modules"]]
modules[["modules"]][["1"]]
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
powers = 7:11
pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
library(GWENA)
load("combat_adj_91_samples.Rdata")
combat.adj = t(combat.adj)
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
pst[["powerEstimate"]]
pst = pst[["fitIndices"]]
cex1=1.1
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers = 7:11
pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
threads_to_use = 2
net = build_net(combat.adj, cor_func = "pearson", fit_cut_off = 0.80, n_threads = threads_to_use, network_type = "signed")
fit_power_table = net$metadata$fit_power_table
fit_power_table[fit_power_table$Power == net$metadata$power, "SFT.R.sq"]
modules = detect_modules(combat.adj, net$network)
fit_power_table[fit_power_table$Power == net$metadata$power, "SFT.R.sq"]
View(fit_power_table)
# here we define the adjacency matrix using soft thresholding with beta=6
ADJ1=abs(cor(datExpr,use="p"))^3
# here we define the adjacency matrix using soft thresholding with beta=6
ADJ1=abs(cor(combat.adj,use="p"))^3
# When you have a lot of genes use the following code
k=softConnectivity(datE=combat.adj,power=3)
# Plot a histogram of k and a scale free topology plot
sizeGrWindow(10,5)
par(mfrow=c(1,2))
hist(k)
scaleFreePlot(k, main="Check scale free topology\n")
# Turn adjacency into a measure of dissimilarity
dissADJ=1-ADJ1
View(pst)
?pickSoftThreshold
powers=seq(from=2,to=20,by=1)
pst=pickSoftThreshold(combat.adj,RsquaredCut = 0.80, powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
powers=seq(from=2,to=20,by=1)
pst=pickSoftThreshold(combat.adj,RsquaredCut = 0.80, powerVector=powers, networkType ="signed", moreNetworkConcepts=T)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
library(GWENA)
load("combat_adj_91_samples.Rdata")
combat.adj = t(combat.adj)
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft_bicor = pickSoftThreshold(data = combat.adj, RsquaredCut = 0.90, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="bicor" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sf_bicort$fitIndices[,1], -sign(sft_bicor$fitIndices[,3])*sft_bicor$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft_bicor = pickSoftThreshold(data = combat.adj, RsquaredCut = 0.90, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="bicor" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft_bicor$fitIndices[,1], -sign(sft_bicor$fitIndices[,3])*sft_bicor$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft_bicor$fitIndices[,1], -sign(sft_bicor$fitIndices[,3])*sft_bicor$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft_bicor$fitIndices[,1], sft_bicor$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft_bicor$fitIndices[,1], sft_bicor$fitIndices[,5], labels=powers, cex=cex1,col="red")
View(sft_bicor)
sft_bicor[["powerEstimate"]]
View(sft)
rm(sft
)
View(pst)
rm(owers)
# here we define the adjacency matrix using soft thresholding with beta=6
ADJ1=abs(cor(combat.adj,use="p"))^11
# When you have a lot of genes use the following code
k=softConnectivity(datE=combat.adj,power=11)
# Plot a histogram of k and a scale free topology plot
sizeGrWindow(10,5)
par(mfrow=c(1,2))
hist(k)
scaleFreePlot(k, main="Check scale free topology\n")
dissTOM=TOMdist(ADJ1)
#Calculate the dendrogram height
hierTOM = hclust(as.dist(dissTOM),method="average");
# The reader should vary the height cut-off parameter h1
# (related to the y-axis of dendrogram) in the following
colorStaticTOM = as.character(cutreeStaticColor(hierTOM, cutHeight=.99, minSize=20))
colorDynamicTOM = labels2colors (cutreeDynamic(hierTOM,method="tree"))
colorDynamicHybridTOM = labels2colors(cutreeDynamic(hierTOM, distM= dissTOM , cutHeight = 0.998,
deepSplit=2, pamRespectsDendro = FALSE))
# Now we plot the results
sizeGrWindow(10,5)
plotDendroAndColors(hierTOM,
colors=data.frame(truemodule, colorStaticTOM,
colorDynamicTOM, colorDynamicHybridTOM),
dendroLabels = FALSE, marAll = c(1, 8, 3, 1),
main = "Gene dendrogram and module colors, TOM dissimilarity")
#Calculate the dendrogram height
hierTOM = hclust(as.dist(dissTOM),method="average");
# The reader should vary the height cut-off parameter h1
# (related to the y-axis of dendrogram) in the following
colorStaticTOM = as.character(cutreeStaticColor(hierTOM, cutHeight=.99, minSize=20))
colorDynamicTOM = labels2colors (cutreeDynamic(hierTOM,method="tree"))
colorDynamicHybridTOM = labels2colors(cutreeDynamic(hierTOM, distM= dissTOM , cutHeight = 0.998,
deepSplit=2, pamRespectsDendro = FALSE))
# Now we plot the results
sizeGrWindow(10,5)
plotDendroAndColors(hierTOM,
colors=data.frame(colorStaticTOM,
colorDynamicTOM, colorDynamicHybridTOM),
dendroLabels = FALSE, marAll = c(1, 8, 3, 1),
main = "Gene dendrogram and module colors, TOM dissimilarity")
uniqe(colorDynamicTOM)
unique(colorDynamicTOM)
unique(colorDynamicTOM)
unique(colorStaticTOM)
table(colorDynamicHybridTOM)
datME=moduleEigengenes(datExpr,colorh1)$eigengenes
datME=moduleEigengenes(combat.adj,colorh1)$eigengenes
?oduleEigengenes
?ModuleEigengenes
?moduleEigengenes
datME=moduleEigengenes(combat.adj)$eigengenes
datME=moduleEigengenes(combat.adj, unique(colorDynamicTOM))$eigengenes
?labels2colors
ncol(combat.adj)
datME=moduleEigengenes(combat.adj, labels2colors(1:13831))$eigengenes
setwd("~/GitHub/Planet_Epigenetic_GA_Clocks")
load("Perez_Dis_PhenoData.Rdata")
View(pheno)
which(pheno$mom_race == "White")
length(which(pheno$mom_race == "White"))
132/153
length(which(pheno$childs_race == "White"))
length(which(pheno$childs_race == "White" & which(pheno$mom_race == "White")))
length(which(pheno$childs_race == "White" & pheno$mom_race == "White"))
127/132
127/153
15 -6
9 -4.5
4.5 + 6
10.5/15
