colnames(count.mat) = colnames(combat.adj)
rownames(count.mat) = rownames(combat.adj)
densityPlot(log2(combat.adj), sampGroups = meta_data_cp$PrepID, main = "Normalized and Combat Corrected", xlab = "log2 counts", legend = F)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
R = 15
(propvar = summary(PCobj)$importance["Proportion of Variance", 1:R])
(cummvar = summary(PCobj)$importance["Cumulative Proportion", 1:R])
## Visualize the proportion of variance explained by each PC:
par(mfrow=c(1,2))
par(mar = c(5,5,4,2))
barplot(propvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Variation Explained (%)", cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
par(mar = c(5,5,4,2))
barplot(cummvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Cummulative Variation Explained (%)",cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
abline(a = 100*cummvar[R], b = 0, lwd = 3, col = "red", lty = "dashed")
## Compare PCS1-5 vs. Batch - this should be the most important variable and should see big difference in PC1:
par(mfrow=c(1,5))
plot(PCs[,"PC1"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 1")
plot(PCs[,"PC2"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 2")
plot(PCs[,"PC3"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 3")
plot(PCs[,"PC4"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 4")
plot(PCs[,"PC5"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 5")
x1 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$PrepID)) + geom_point() + labs(title = "By Batch") +theme(legend.position = "bottom")
x2 =ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$OfficialEnrollCategory)) + geom_point() + labs(title = "By Enrollment Category") +theme(legend.position = "bottom")
x3 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$ChildGender)) + geom_point() + labs(title = "By Children's Sex") +theme(legend.position = "bottom")
x4 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$Delivery2)) + geom_point() + labs(title = "By Delivery Method") +theme(legend.position = "bottom")
grid.arrange(x1, x2, x3, x4, ncol = 4)
dev.off()
library(limma)
library(checkmate)
library(sva)
library(DESeq2)
library(readxl)
library(WGCNA)
library(broom)
library(RColorBrewer)
library(ggplot2)
getwd()
pdf(file = "/Users/cynthiaperez/GitHub/Placenta_RNAseq_WGCNA/combat_norm_plots.pdf",width = 14.74, height = 8.14 )
count.mat = matrix(unlist(lapply(combat.adj,as.double)), ncol=141)
colnames(count.mat) = colnames(combat.adj)
rownames(count.mat) = rownames(combat.adj)
densityPlot(log2(combat.adj), sampGroups = meta_data_cp$PrepID, main = "Normalized and Combat Corrected", xlab = "log2 counts", legend = F)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
R = 15
(propvar = summary(PCobj)$importance["Proportion of Variance", 1:R])
(cummvar = summary(PCobj)$importance["Cumulative Proportion", 1:R])
## Visualize the proportion of variance explained by each PC:
par(mfrow=c(1,2))
par(mar = c(5,5,4,2))
barplot(propvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Variation Explained (%)", cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
par(mar = c(5,5,4,2))
barplot(cummvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Cummulative Variation Explained (%)",cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
abline(a = 100*cummvar[R], b = 0, lwd = 3, col = "red", lty = "dashed")
## Compare PCS1-5 vs. Batch - this should be the most important variable and should see big difference in PC1:
par(mfrow=c(1,5))
plot(PCs[,"PC1"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 1")
plot(PCs[,"PC2"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 2")
plot(PCs[,"PC3"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 3")
plot(PCs[,"PC4"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 4")
plot(PCs[,"PC5"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 5")
x1 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$PrepID)) + geom_point() + labs(title = "By Batch") +theme(legend.position = "bottom")
x2 =ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$OfficialEnrollCategory)) + geom_point() + labs(title = "By Enrollment Category") +theme(legend.position = "bottom")
x3 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$ChildGender)) + geom_point() + labs(title = "By Children's Sex") +theme(legend.position = "bottom")
x4 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$Delivery2)) + geom_point() + labs(title = "By Delivery Method") +theme(legend.position = "bottom")
grid.arrange(x1, x2, x3, x4, ncol = 4)
dev.off()
View(combat.adj)
dim(combat.adj)
pdf(file = "/Users/cynthiaperez/GitHub/Placenta_RNAseq_WGCNA/combat_norm_plots.pdf",width = 14.74, height = 8.14 )
count.mat = matrix(unlist(lapply(combat.adj,as.double)), ncol=136)
colnames(count.mat) = colnames(combat.adj)
rownames(count.mat) = rownames(combat.adj)
densityPlot(log2(combat.adj), sampGroups = meta_data_cp$PrepID, main = "Normalized and Combat Corrected", xlab = "log2 counts", legend = F)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
R = 15
(propvar = summary(PCobj)$importance["Proportion of Variance", 1:R])
(cummvar = summary(PCobj)$importance["Cumulative Proportion", 1:R])
## Visualize the proportion of variance explained by each PC:
par(mfrow=c(1,2))
par(mar = c(5,5,4,2))
barplot(propvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Variation Explained (%)", cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
par(mar = c(5,5,4,2))
barplot(cummvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Cummulative Variation Explained (%)",cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
abline(a = 100*cummvar[R], b = 0, lwd = 3, col = "red", lty = "dashed")
## Compare PCS1-5 vs. Batch - this should be the most important variable and should see big difference in PC1:
par(mfrow=c(1,5))
plot(PCs[,"PC1"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 1")
plot(PCs[,"PC2"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 2")
plot(PCs[,"PC3"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 3")
plot(PCs[,"PC4"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 4")
plot(PCs[,"PC5"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 5")
x1 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$PrepID)) + geom_point() + labs(title = "By Batch") +theme(legend.position = "bottom")
x2 =ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$OfficialEnrollCategory)) + geom_point() + labs(title = "By Enrollment Category") +theme(legend.position = "bottom")
x3 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$ChildGender)) + geom_point() + labs(title = "By Children's Sex") +theme(legend.position = "bottom")
x4 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$Delivery2)) + geom_point() + labs(title = "By Delivery Method") +theme(legend.position = "bottom")
grid.arrange(x1, x2, x3, x4, ncol = 4)
dev.off()
densityPlot = function (dat, sampGroups = NULL, main = "", xlab = "Log2 Counts", pal = brewer.pal(8,
"Dark2"), xlim, ylim, add = TRUE, legend = TRUE, ...) {
if (is(dat, "matrix")) {
b <- dat
}
d <- apply(b, 2, function(x) density(as.vector(x), na.rm = TRUE))
if (missing(ylim))
ylim <- range(sapply(d, function(i) range(i$y)))
if (missing(xlim))
xlim <- range(sapply(d, function(i) range(i$x)))
if (is.null(sampGroups)) {
sampGroups <- rep(1, ncol(b))
}
else if (length(sampGroups) == 1) {
sampGroups <- rep(sampGroups, ncol(b))
}
sampGroups <- as.factor(sampGroups)
if (add) {
plot(x = 0, type = "n", ylim = ylim, xlim = xlim, ylab = "Density",
xlab = xlab, main = main, ...)
abline(h = 0, col = "grey80")
}
for (i in seq_along(d)) {
lines(d[[i]], col = pal[sampGroups[i]])
}
if (legend & length(levels(sampGroups)) > 1) {
legend("topright", legend = levels(sampGroups), text.col = pal)
}
}
options(stringsAsFactors = FALSE)
pdf(file = "/Users/cynthiaperez/GitHub/Placenta_RNAseq_WGCNA/combat_norm_plots.pdf",width = 14.74, height = 8.14 )
count.mat = matrix(unlist(lapply(combat.adj,as.double)), ncol=136)
colnames(count.mat) = colnames(combat.adj)
rownames(count.mat) = rownames(combat.adj)
densityPlot(log2(combat.adj), sampGroups = meta_data_cp$PrepID, main = "Normalized and Combat Corrected", xlab = "log2 counts", legend = F)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
R = 15
(propvar = summary(PCobj)$importance["Proportion of Variance", 1:R])
(cummvar = summary(PCobj)$importance["Cumulative Proportion", 1:R])
## Visualize the proportion of variance explained by each PC:
par(mfrow=c(1,2))
par(mar = c(5,5,4,2))
barplot(propvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Variation Explained (%)", cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
par(mar = c(5,5,4,2))
barplot(cummvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Cummulative Variation Explained (%)",cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
abline(a = 100*cummvar[R], b = 0, lwd = 3, col = "red", lty = "dashed")
## Compare PCS1-5 vs. Batch - this should be the most important variable and should see big difference in PC1:
par(mfrow=c(1,5))
plot(PCs[,"PC1"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 1")
plot(PCs[,"PC2"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 2")
plot(PCs[,"PC3"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 3")
plot(PCs[,"PC4"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 4")
plot(PCs[,"PC5"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 5")
x1 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$PrepID)) + geom_point() + labs(title = "By Batch") +theme(legend.position = "bottom")
x2 =ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$OfficialEnrollCategory)) + geom_point() + labs(title = "By Enrollment Category") +theme(legend.position = "bottom")
x3 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$ChildGender)) + geom_point() + labs(title = "By Children's Sex") +theme(legend.position = "bottom")
x4 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$Delivery2)) + geom_point() + labs(title = "By Delivery Method") +theme(legend.position = "bottom")
grid.arrange(x1, x2, x3, x4, ncol = 4)
dev.off()
library(gridExtra)
pdf(file = "/Users/cynthiaperez/GitHub/Placenta_RNAseq_WGCNA/combat_norm_plots.pdf",width = 14.74, height = 8.14 )
count.mat = matrix(unlist(lapply(combat.adj,as.double)), ncol=136)
colnames(count.mat) = colnames(combat.adj)
rownames(count.mat) = rownames(combat.adj)
densityPlot(log2(combat.adj), sampGroups = meta_data_cp$PrepID, main = "Normalized and Combat Corrected", xlab = "log2 counts", legend = F)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
R = 15
(propvar = summary(PCobj)$importance["Proportion of Variance", 1:R])
(cummvar = summary(PCobj)$importance["Cumulative Proportion", 1:R])
## Visualize the proportion of variance explained by each PC:
par(mfrow=c(1,2))
par(mar = c(5,5,4,2))
barplot(propvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Variation Explained (%)", cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
par(mar = c(5,5,4,2))
barplot(cummvar*100, xlab = paste("Top", R, "PCs", sep = " "), ylab = "Cummulative Variation Explained (%)",cex.axis = 1.5, cex.lab = 1.8, cex.names = 1.5)
abline(a = 100*cummvar[R], b = 0, lwd = 3, col = "red", lty = "dashed")
## Compare PCS1-5 vs. Batch - this should be the most important variable and should see big difference in PC1:
par(mfrow=c(1,5))
plot(PCs[,"PC1"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 1")
plot(PCs[,"PC2"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 2")
plot(PCs[,"PC3"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 3")
plot(PCs[,"PC4"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 4")
plot(PCs[,"PC5"] ~ as.factor(meta_data_cp$PrepID),xlab="Batch",ylab="PC",main="PC 5")
x1 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$PrepID)) + geom_point() + labs(title = "By Batch") +theme(legend.position = "bottom")
x2 =ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$OfficialEnrollCategory)) + geom_point() + labs(title = "By Enrollment Category") +theme(legend.position = "bottom")
x3 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$ChildGender)) + geom_point() + labs(title = "By Children's Sex") +theme(legend.position = "bottom")
x4 = ggplot(data = data.frame(PCs), aes(PC2, PC1 ,colour = meta_data_cp$Delivery2)) + geom_point() + labs(title = "By Delivery Method") +theme(legend.position = "bottom")
grid.arrange(x1, x2, x3, x4, ncol = 4)
dev.off()
install.packages("rmarkdown")
load("raw_norm_combat_seq.Rdata")
meta_data = read.csv(file="meta_data_cp_Sept9.csv", header = T)
library(tidyverse)
load("Perez_Dis_PhenoData.Rdata")
rm(glowing_uq_vst)
rm(combat.adj)
pheno = pheno %>% filter(participant_id %in% meta_data$ID)%>%
arrange(participant_id) %>% mutate(prepID = meta_data$PrepID)
prep1_pre2_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id)
GlowingPlacenta_RNAseq.rawCounts = GlowingPlacenta_RNAseq.rawCounts.nonZero.141.samples_copy %>% select(as.vector(t(prep1_pre2_ID)))
Lean_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id, official_enroll_category) %>% filter(official_enroll_category == "Lean")
Lean_ID = as.vector(t(Lean_ID$participant_id))
Overweight_ID = pheno %>% filter(prepID == "prep2"| prepID == "prep3") %>% select(participant_id, official_enroll_category) %>% filter(official_enroll_category == "Overweight")
Overweight_ID = as.vector(t(Overweight_ID$participant_id))
GlowingPlacenta_RNAseq.rawCounts$X = row.names(GlowingPlacenta_RNAseq.rawCounts)
GlowingPlacenta_RNAseq.rawCounts = GlowingPlacenta_RNAseq.rawCounts %>% relocate(X)
Lean_ID_index = c()
for (x in 1:length(Lean_ID)){
Lean_ID_index[x] = which(colnames(GlowingPlacenta_RNAseq.rawCounts) == Lean_ID[x])
}
Overweight_ID_index = c()
for (x in 1:length(Overweight_ID)){
Overweight_ID_index[x] = which(colnames(GlowingPlacenta_RNAseq.rawCounts) == Overweight_ID[x])
}
rownames(GlowingPlacenta_RNAseq.rawCounts) = NULL
#write.table(GlowingPlacenta_RNAseq.rawCounts, file = "GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", row.names = F, col.names = T)
library(TRAPR)
Sample <- TRAPR.Data.ReadExpressionTable("GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", Exp1 = Lean_ID_index, Exp2 = Overweight_ID_index, Tag = c('Lean', 'Overweight'))
nSample <- TRAPR.Normalize(Sample, Method = "UpperQuartile")
vst_data = TRAPR.Transformation.VSN(nSample)
library(sva)
glowing_uq_vst = data.frame(vst_data$CurrentMatrix)
row.names(glowing_uq_vst) = vst_data[["CurrentGene"]]
colnames(glowing_uq_vst) = vst_data[["CurrentSample"]]
pheno = pheno %>% filter(prepID == "prep2"| prepID == "prep3")
batch = pheno$prepID
## Model matrix for batch-corrections (May need to adjust model matrix to 'protect' coefficients (study specific)):
mod <- model.matrix(~1 + official_enroll_category , data=pheno)
## Run ComBat to remove batch effects
combat.adj = ComBat(glowing_uq_vst,batch = batch, mod = mod)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
ggplot(data = data.frame(PCs), aes(PC2, PC1, color = pheno$prepID)) + geom_point() + labs(title = "UQ +VST +Combat for prep2 and prep3 (n=93)")
write.table(GlowingPlacenta_RNAseq.rawCounts, file = "GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", row.names = F, col.names = T)
Sample <- TRAPR.Data.ReadExpressionTable("GlowingPlacenta_RNAseq.rawCounts-93-samples.txt", sep = "\t", Exp1 = Lean_ID_index, Exp2 = Overweight_ID_index, Tag = c('Lean', 'Overweight'))
nSample <- TRAPR.Normalize(Sample, Method = "UpperQuartile")
vst_data = TRAPR.Transformation.VSN(nSample)
glowing_uq_vst = data.frame(vst_data$CurrentMatrix)
row.names(glowing_uq_vst) = vst_data[["CurrentGene"]]
colnames(glowing_uq_vst) = vst_data[["CurrentSample"]]
pheno = pheno %>% filter(prepID == "prep2"| prepID == "prep3")
batch = pheno$prepID
## Model matrix for batch-corrections (May need to adjust model matrix to 'protect' coefficients (study specific)):
mod <- model.matrix(~1 + official_enroll_category , data=pheno)
## Run ComBat to remove batch effects
combat.adj = ComBat(glowing_uq_vst,batch = batch, mod = mod)
PCobj = prcomp(t(combat.adj), retx = T, center = T, scale. = T)
PCs = PCobj$x
ggplot(data = data.frame(PCs), aes(PC2, PC1, color = pheno$prepID)) + geom_point() + labs(title = "UQ +VST +Combat for prep2 and prep3 (n=93)")
PCs
PCs$PC1 > 300
View(PCs)
PCs[,"PC1"]
PCs[,"PC1"] > 300
which(PCs[,"PC1"] > 300 == TRUE)
?subset
subset(PCs, PC1 > 300)
colnames(PCs)
subset(PCs, "PC1" > 300)
subset(PCs, PC1 > 300)
PCs[,"PC1"] > 300
subset(PCs[,"PC1"] > 300, TRUE)
subset(PCs[,"PC1"] > 300 == TRUE)
(PCs[,"PC1"] > 300) == TRUE
which(PCs[,"PC1"] > 300) == TRUE)
which((PCs[,"PC1"] > 300) == TRUE)
View(combat.adj)
combat.adj1 = combat.adj[, -c("G-123", "G-285")]
combat.adj1 = combat.adj[,colnames(combat.adj)!= "G-123" & colnames(combat.adj)!= "G-285"]
dim(combat.adj1)
dim(combat.adj)
combat.adj1 = combat.adj[, !colnames(combat.adj) %in% c("G-123", "G-280")]
dim(combat.adj)
dim(combat.adj1)
rm(combat.adj1)
combat.adj = combat.adj[, !colnames(combat.adj) %in% c("G-123", "G-280")]
dim(combat.adj)
View(combat.adj)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = F, col.names = T)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = T, col.names = T)
write.table(combat.adj, file = "combat-adj-91-samples.txt", sep = "\t", row.names = F, col.names = T)
combat.adj1 = combat.adj
combat.adj1$X = row.names(combat.adj)
combat.adj1 = combat.adj1 %>% relocate(X)
View(combat.adj1)
combat.adj1 = data.frame(combat.adj)
combat.adj1$X = row.names(combat.adj)
combat.adj1 = combat.adj1 %>% relocate(X)
View(combat.adj1)
?write.csv
write.csv(combat.adj,file = "combat-adj-91-samples.csv", sep = ",", row.names = T, col.names = T)
View(combat.adj)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
library(GWENA)
save(combat.adj, file = "combat_adj_91_samples.Rdata")
rm(combat.adj1)
View(combat.adj)
load("combat_adj_91_samples.Rdata")
View(combat.adj)
combat.adj = t(combat.adj)
powers=seq(from=1,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.2
cex.axis=1.5
cex.lab=1
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=0.5
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers=seq(from=2,to=20,by=2)
pst=pickSoftThreshold(combat.adj,powerVector=powers, networkType ="signed", moreNetworkConcepts=T)[[2]]
cex1=1.1
cex.axis=1.5
cex.lab=1.5
cex.main=1.5
par(mfrow=c(2,2));
plot(powers,-sign(pst[,3])*pst[,2],type="n",
xlab="Soft Threshold",
ylab="SFT,signed Rˆ2",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Scale Free Fit Index Rˆ2");
text(powers,-sign(pst[,3])*pst[,2], labels=powers,cex=cex1,col="red")
# this line corresponds to using an Rˆ2 cut-off of h
abline(h=0.95,col="red")
plot(powers,pst$Density,
type="n", xlab="Soft Threshold",ylab="Density", cex.axis=cex.axis, cex.main=cex.main,cex.lab=cex.lab, main="Density")
text(powers,pst$Density,labels=powers,cex=cex1,col="red")
plot(powers,pst$Heterogeneity,type="n",xlab="Soft Threshold", ylab="Heterogeneity",cex.main=cex.main, cex.lab=cex.lab, cex.axis=cex.axis, main="Heterogeneity")
text(powers,pst$Heterogeneity,labels=powers,cex=cex1,col="red")
plot(powers,pst$Centralization,type="n",xlab="Soft Threshold", ylab="Centralization",cex.axis=cex.axis, cex.main=cex.main, cex.lab=cex.lab, main="Centralization")
text(powers, pst$Centralization, labels=powers,cex=cex1, col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
powers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="bicor" )
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
?pickSoftThreshold
owers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="cor", corFnc = list(method = "spearman"))
owers = 1:20
#Call the network topology analysis function
#Analysis of scale free topology for multiple hard thresholds
sft = pickSoftThreshold(data = combat.adj, dataIsExpr = T, powerVector = powers,networkType ="signed", corFnc="cor", corOptions = list(method = "spearman"))
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
